00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.14.00
Created On: 3/8/2014 12:07:28 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  *D0: Temp
00000000                             9  *D1: Output
00000000                            10  *D2: current Instruction
00000000                            11  *D3: JSR variable
00000000                            12  *D4: JSR variable
00000000                            13  *D5: Unused
00000000                            14  *D6: Unused
00000000                            15  *D7: Unused
00000000                            16  
00000000                            17  *A0: 
00000000                            18  *A1: 
00000000                            19  *A2: Used in jump table addressing
00000000                            20  *A3: Size
00000000                            21  *A4: start memory
00000000                            22  *A5: end memory
00000000                            23  *A6: Decoded output
00000000                            24  *A7: Do not use
00000000                            25  
00001000                            26      ORG    $1000
00001000                            27  START:                  ; first instruction of program
00001000  4DF9 00001CAA             28              LEA     output,A6
00001006  49F8 7000                 29              LEA     $7000,A4
0000100A  4254                      30              CLR     (A4)
0000100C  065C 0A89                 31              ADDI.W  #$0A89,(A4)+
00001010  065C 00AB                 32              ADDI.W  #$00AB,(A4)+
00001014                            33  
00001014  49F8 7000                 34              LEA     $7000,A4        reset A4
00001018  4246                      35              CLR     D6
0000101A  0606 0010                 36              ADDI.B  #16,D6
0000101E  4EF9 00001042             37              JMP     main            branch to main
00001024                            38  
00001024  1CBC 0000                 39  print       MOVE.B #$00,(A6)        Add terminator to output str
00001028  43F9 00001CAA             40              LEA output,A1           load output to A1
0000102E  700D                      41              MOVEQ #13,D0            Load trap code for printing
00001030  4E4F                      42              TRAP #15                Print output buffer
00001032  5306                      43              SUBI.B  #1,D6
00001034  0C06 0000                 44              CMPI.B  #0,D6
00001038  6700 0CC0                 45              BEQ     done            branch to done
0000103C  4DF9 00001CAA             46              LEA     output,A6       reset output
00001042                            47  ************************************************************
00001042                            48  *   main
00001042                            49  ************************************************************
00001042  341C                      50  main        MOVE.W  (A4)+,D2        get next word
00001044  3602                      51              MOVE.W  D2,D3           get word for decoding
00001046  4EB9 00001986             52              JSR     iso12to15       get last 4 bits (12-15)
0000104C  C6FC 0006                 53              MULU    #6,D3           form offset
00001050  45F9 0000105E             54              LEA     op_jump,A2      load jump table
00001056  4EB2 3000                 55              JSR     0(A2,D3)        jump
0000105A  4EF8 1024                 56              JMP     print           branch to print
0000105E                            57  ************************************************************
0000105E                            58  *   OP-Code Jump
0000105E                            59  ************************************************************            
0000105E  4EF9 000010C0             60  op_jump     JMP     op_0000         Jump to 0000
00001064  4EF9 00001250             61              JMP     op_0001         Jump to 0001
0000106A  4EF9 00001276             62              JMP     op_0010         Jump to 0010
00001070  4EF9 0000129C             63              JMP     op_0011         Jump to 0011
00001076  4EF9 000012C2             64              JMP     op_0100         Jump to 0100
0000107C  4EF9 000014C4             65              JMP     op_0101         Jump to 0101
00001082  4EF9 000014FC             66              JMP     op_0110         Jump to 0110
00001088  4EF9 0000163C             67              JMP     op_0111         Jump to 0111
0000108E  4EF9 00001678             68              JMP     op_1000         Jump to 1000
00001094  4EF9 000016AE             69              JMP     op_1001         Jump to 1001
0000109A  4EF9 000016B0             70              JMP     op_1010         Jump to 1010
000010A0  4EF9 000016B6             71              JMP     op_1011         Jump to 1011
000010A6  4EF9 000016B8             72              JMP     op_1100         Jump to 1100
000010AC  4EF9 000016BA             73              JMP     op_1101         Jump to 1101
000010B2  4EF9 000017C0             74              JMP     op_1110         Jump to 1100
000010B8  4EF9 0000191E             75              JMP     op_1111         Jump to 1111
000010BE  4E75                      76              RTS                     return
000010C0                            77  ************************************************************
000010C0                            78  *   0000
000010C0                            79  *   ADDI
000010C0                            80  *   ANDI
000010C0                            81  *   BCHG
000010C0                            82  *   CMPI
000010C0                            83  *   EORI
000010C0                            84  ************************************************************
000010C0  3602                      85  op_0000     MOVE.W  D2,D3
000010C2  0803 0008                 86              BTST.L  #8,D3
000010C6  6700 0018                 87              BEQ     upper0000
000010CA  4EB9 0000195A             88  lower0000   JSR     iso6to7
000010D0  C6FC 0006                 89              MULU.W  #6,D3
000010D4  45F9 000010F6             90              LEA     lower0000_2,A2
000010DA  4EB2 3000                 91              JSR     0(A2,D3)
000010DE  4E75                      92              RTS 
000010E0  4EB9 0000197A             93  upper0000   JSR     iso9to11
000010E6  C6FC 0006                 94              MULU.W  #6,D3
000010EA  45F9 00001166             95              LEA     upper0000_2,A2
000010F0  4EB2 3000                 96              JSR     0(A2,D3)
000010F4  4E75                      97              RTS           
000010F6                            98  ************************************************************
000010F6                            99  *   BCHG sub table
000010F6                           100  ************************************************************            
000010F6  4EF9 00001114            101  lower0000_2 JMP     btst
000010FC  4EF9 0000111A            102              JMP     bchg
00001102  4EF9 00001154            103              JMP     bclr
00001108  4EF9 0000115A            104              JMP     bset
0000110E  4EF9 00001160            105              JMP     movep
00001114  4EF9 00001C88            106  btst        JMP     bad_code
0000111A  1CFC 0042                107  bchg        MOVE.B  #'B',(A6)+      Add B to output
0000111E  1CFC 0043                108              MOVE.B  #'C',(A6)+      Add C to output
00001122  1CFC 0048                109              MOVE.B  #'H',(A6)+      Add H to output
00001126  1CFC 0047                110              MOVE.B  #'G',(A6)+      Add G to output
0000112A  4EB9 00001C50            111              JSR     print5spcs      add 5 spaces to buffer   
00001130  1CFC 0044                112              MOVE.B  #'D',(A6)+      Add D to output
00001134  3602                     113              MOVE.W  D2,D3
00001136  4EB9 0000197A            114              JSR     iso9to11
0000113C  B63C 0004                115              CMP.B   #%100,D3        check for immediate data
00001140  6700 0B46                116              BEQ     bad_code        immediate data is handled by upper
00001144  C6FC 0006                117              MULU.W  #6,D3
00001148  45F9 00001BDE            118              LEA     reg_num,A2
0000114E  4EB2 3000                119              JSR     0(A2,D3)               
00001152  4E75                     120              RTS
00001154  4EF9 00001C88            121  bclr        JMP     bad_code
0000115A  4EF9 00001C88            122  bset        JMP     bad_code
00001160  4EF9 00001C88            123  movep       JMP     bad_code
00001166                           124  ************************************************************
00001166                           125  *   ADDI\ANDI\BCHG(I)\CMPI\EORI sub table
00001166                           126  ************************************************************
00001166  4EF9 00001190            127  upper0000_2 JMP     ori
0000116C  4EF9 00001196            128              JMP     andi
00001172  4EF9 000011B0            129              JMP     subi
00001178  4EF9 000011B6            130              JMP     addi
0000117E  4EF9 000011CE            131              JMP     biti
00001184  4EF9 00001206            132              JMP     eori
0000118A  4EF9 00001222            133              JMP     cmpi
00001190  4EF9 00001C88            134  ori         JMP     bad_code            
00001196  1CFC 0041                135  andi        MOVE.B  #'A',(A6)+      Add A to output
0000119A  1CFC 004E                136              MOVE.B  #'N',(A6)+      Add N to output
0000119E  1CFC 0044                137              MOVE.B  #'D',(A6)+      Add D to output
000011A2  1CFC 0049                138              MOVE.B  #'I',(A6)+      Add I to output
000011A6  1CFC 002E                139              MOVE.B  #'.',(A6)+      Add '.' to output
000011AA  4EF9 0000123E            140              JMP     imm_final
000011B0  4EF9 00001C88            141  subi        JMP     bad_code 
000011B6  1CFC 0041                142  addi        MOVE.B  #'A',(A6)+      Add A to output
000011BA  1CFC 0044                143              MOVE.B  #'D',(A6)+      Add D to output
000011BE  1CFC 0044                144              MOVE.B  #'D',(A6)+      Add D to output
000011C2  1CFC 0049                145              MOVE.B  #'I',(A6)+      Add I to output
000011C6  1CFC 002E                146              MOVE.B  #'.',(A6)+      Add '.' to output
000011CA  6000 0072                147              BRA     imm_final           
000011CE  4EB9 0000195A            148  biti        JSR iso6to7
000011D4  B63C 0000                149              CMP.B   #%00,D3
000011D8  6700 0AAE                150              BEQ     bad_code
000011DC  B63C 0001                151              CMP.B   #%01,D3
000011E0  6700 000E                152              BEQ     bchgi
000011E4  B63C 0002                153              CMP.B   #%10,D3
000011E8  6700 0A9E                154              BEQ     bad_code
000011EC  6000 0A9A                155              BRA     bad_code
000011F0  1CFC 0042                156  bchgi       MOVE.B  #'B',(A6)+      Add B to output
000011F4  1CFC 0043                157              MOVE.B  #'C',(A6)+      Add C to output
000011F8  1CFC 0048                158              MOVE.B  #'H',(A6)+      Add H to output
000011FC  1CFC 0047                159              MOVE.B  #'G',(A6)+      Add G to output
00001200  4EF9 0000123E            160              JMP     imm_final
00001206  1CFC 0045                161  eori        MOVE.B  #'E',(A6)+      Add E to output
0000120A  1CFC 004F                162              MOVE.B  #'O',(A6)+      Add O to output
0000120E  1CFC 0052                163              MOVE.B  #'R',(A6)+      Add R to output
00001212  1CFC 0049                164              MOVE.B  #'I',(A6)+      Add I to output
00001216  1CFC 002E                165              MOVE.B  #'.',(A6)+      Add '.' to output
0000121A  4EF9 0000123E            166              JMP     imm_final 
00001220  4E75                     167              RTS
00001222  1CFC 0045                168  cmpi        MOVE.B  #'E',(A6)+      Add E to output
00001226  1CFC 004F                169              MOVE.B  #'O',(A6)+      Add O to output
0000122A  1CFC 0052                170              MOVE.B  #'R',(A6)+      Add R to output
0000122E  1CFC 0049                171              MOVE.B  #'I',(A6)+      Add I to output
00001232  1CFC 002E                172              MOVE.B  #'.',(A6)+      Add '.' to output
00001236  4EF9 0000123E            173              JMP     imm_final 
0000123C  4E75                     174              RTS
0000123E  4EB9 00001A74            175  imm_final   JSR     immediate
00001244  1CFC 002C                176              MOVE.B  #',',(A6)+      Add ',' to output
00001248  4EB9 00001AC0            177              JSR     addressing      jump to addressing
0000124E                           178              *TODO: check if the mode is correct
0000124E  4E75                     179              RTS
00001250                           180  ************************************************************
00001250                           181  *   0001
00001250                           182  *   MOVE.B
00001250                           183  ************************************************************
00001250  1CFC 004D                184  op_0001     MOVE.B  #'M',(A6)+      Add M to output
00001254  1CFC 004F                185              MOVE.B  #'O',(A6)+      Add O to output
00001258  1CFC 0056                186              MOVE.B  #'V',(A6)+      Add V to output
0000125C  1CFC 0045                187              MOVE.B  #'E',(A6)+      Add E to output
00001260  1CFC 002E                188              MOVE.B  #'.',(A6)+      Add . to output
00001264  1CFC 0042                189              MOVE.B  #'B',(A6)+      Add B to output
00001268  4EB9 00001C50            190              JSR     print5spcs      add 5 spaces to buffer
0000126E  4EB9 00001AC0            191              JSR     addressing      jump to addressing sub routine
00001274                           192              *TODO: check if the mode is correct
00001274  4E75                     193              RTS            
00001276                           194  ************************************************************
00001276                           195  *   0010 
00001276                           196  *   MOVE.W
00001276                           197  ************************************************************
00001276  1CFC 004D                198  op_0010     MOVE.B  #'M',(A6)+      Add M to output
0000127A  1CFC 004F                199              MOVE.B  #'O',(A6)+      Add O to output
0000127E  1CFC 0056                200              MOVE.B  #'V',(A6)+      Add V to output
00001282  1CFC 0045                201              MOVE.B  #'E',(A6)+      Add E to output
00001286  1CFC 002E                202              MOVE.B  #'.',(A6)+      Add . to output
0000128A  1CFC 0057                203              MOVE.B  #'W',(A6)+      Add W to output
0000128E  4EB9 00001C50            204              JSR     print5spcs      add 5 spaces to buffer
00001294  4EB9 00001AC0            205              JSR     addressing      jump to addressing sub routine
0000129A                           206              *TODO: check if the mode is correct            
0000129A  4E75                     207              RTS
0000129C                           208  ************************************************************
0000129C                           209  *   0011 
0000129C                           210  *   MOVE.L
0000129C                           211  ************************************************************
0000129C  1CFC 004D                212  op_0011     MOVE.B  #'M',(A6)+      Add M to output
000012A0  1CFC 004F                213              MOVE.B  #'O',(A6)+      Add O to output
000012A4  1CFC 0056                214              MOVE.B  #'V',(A6)+      Add V to output
000012A8  1CFC 0045                215              MOVE.B  #'E',(A6)+      Add E to output
000012AC  1CFC 002E                216              MOVE.B  #'.',(A6)+      Add . to output
000012B0  1CFC 004C                217              MOVE.B  #'L',(A6)+      Add L to output
000012B4  4EB9 00001C50            218              JSR     print5spcs      add 5 spaces to buffer
000012BA  4EB9 00001AC0            219              JSR     addressing      jump to addressing sub routine
000012C0                           220              *TODO: check if the mode is correct            
000012C0  4E75                     221              RTS
000012C2                           222  ************************************************************
000012C2                           223  *   0100
000012C2                           224  *   CLR
000012C2                           225  *   JSR
000012C2                           226  *   LEA
000012C2                           227  *   MOVEM
000012C2                           228  *   RTS
000012C2                           229  ************************************************************
000012C2  3602                     230  op_0100         MOVE.W  D2,D3           get current instruction
000012C4  0803 0008                231                  BTST.L  #8,D3
000012C8  6600 0018                232                  BNE     lea_or_chk
000012CC  4EB9 00001964            233                  JSR     iso8to11        get next 4 bits (8-11)
000012D2  C6FC 0006                234                  MULU.W  #6,D3           form offset
000012D6  45F9 00001308            235                  LEA     sub0100,A2      load jump table
000012DC  4EB2 3000                236                  JSR     0(A2,D3)
000012E0  4E75                     237                  RTS
000012E2  0803 0006                238  lea_or_chk      BTST.L  #6,D3
000012E6  6700 09A0                239                  BEQ     bad_code
000012EA  1CFC 004C                240                  MOVE.B  #'L',(A6)+      Add L to output
000012EE  1CFC 0045                241                  MOVE.B  #'E',(A6)+      Add E to output
000012F2  1CFC 0041                242                  MOVE.B  #'A',(A6)+      Add A to output   
000012F6  4EB9 0000197A            243                  JSR     iso9to11        get bits 9-11 for A register
000012FC  4EB9 00001C50            244                  JSR     print5spcs      add 5 spaces to buffer
00001302  4EB9 00001AC0            245                  JSR     addressing      jump to addressing sub routine
00001308                           246              *TODO: check if the mode is correct            
00001308  4EF9 00001368            247  sub0100         JMP     sub0100_0            
0000130E  4EF9 0000136E            248                  JMP     sub0100_1
00001314  4EF9 00001374            249                  JMP     sub0100_2       CLR, only here for jump offset
0000131A  4EF9 000013A6            250                  JMP     sub0100_3
00001320  4EF9 000013AC            251                  JMP     sub0100_4
00001326  4EF9 000013B2            252                  JMP     sub0100_5
0000132C  4EF9 000013B8            253                  JMP     sub0100_6
00001332  4EF9 000013BE            254                  JMP     sub0100_7
00001338  4EF9 000013C4            255                  JMP     sub0100_8
0000133E  4EF9 0000140A            256                  JMP     sub0100_9
00001344  4EF9 00001410            257                  JMP     sub0100_10
0000134A  4EF9 00001416            258                  JMP     sub0100_11
00001350  4EF9 0000141C            259                  JMP     sub0100_12
00001356  4EF9 00001452            260                  JMP     sub0100_13
0000135C  4EF9 00001458            261                  JMP     sub0100_14
00001362  4EF9 0000149C            262                  JMP     sub0100_15
00001368  4EF9 00001C88            263  sub0100_0       JMP     bad_code            instruction unknown
0000136E  4EF9 00001C88            264  sub0100_1       JMP     bad_code            clr_or_chk handles this
00001374  1CFC 0043                265  sub0100_2       MOVE.B  #'C',(A6)+          Add C to output
00001378  1CFC 004C                266                  MOVE.B  #'L',(A6)+          Add L to output
0000137C  1CFC 0052                267                  MOVE.B  #'R',(A6)+          Add R to output   
00001380  1CFC 002E                268                  MOVE.B  #'.',(A6)+          Add . to output 
00001384  4EB9 0000195A            269                  JSR     iso6to7             isolate bits 6 and 7 for size
0000138A  C6FC 0006                270                  MULU.W  #6,D3
0000138E  45F9 00001A42            271                  LEA     get_size,A2
00001394  4EB2 3000                272                  JSR     0(A2,D3)
00001398  4EB9 00001C50            273                  JSR     print5spcs          add 5 spaces to buffer
0000139E  4EB9 00001AC0            274                  JSR     addressing
000013A4                           275              *TODO: check if the mode is correct                
000013A4  4E75                     276                  RTS
000013A6  4EF9 00001C88            277  sub0100_3       JMP     bad_code            clr_or_chk handles this
000013AC  4EF9 00001C88            278  sub0100_4       JMP     bad_code            instruction unknown
000013B2  4EF9 00001C88            279  sub0100_5       JMP     bad_code            clr_or_chk handles this
000013B8  4EF9 00001C88            280  sub0100_6       JMP     bad_code            instruction unknown
000013BE  4EF9 00001C88            281  sub0100_7       JMP     bad_code            clr_or_chk handles this
000013C4  4EB9 0000193C            282  sub0100_8       JSR     iso3to5             get bits 3 to 5 for mode
000013CA  B63C 0000                283                  CMP.B   #%000,D3            check if 000
000013CE  6700 08B8                284                  BEQ     bad_code
000013D2  1CFC 004D                285                  MOVE.B  #'M',(A6)+          Add M to output
000013D6  1CFC 004F                286                  MOVE.B  #'O',(A6)+          Add o to output
000013DA  1CFC 0056                287                  MOVE.B  #'V',(A6)+          Add V to output 
000013DE  1CFC 0045                288                  MOVE.B  #'E',(A6)+          Add E to output  
000013E2  1CFC 004D                289                  MOVE.B  #'M',(A6)+          Add M to output
000013E6  1CFC 002E                290                  MOVE.B  #'.',(A6)+          Add . to output 
000013EA  3602                     291                  MOVE.W  D2,D3               get current instruction
000013EC  0803 0006                292                  BTST.L  #6,D3
000013F0  6700 000C                293                  BEQ     movem_w_0
000013F4  1CFC 004C                294                  MOVE.B  #'L',(A6)+          Add L to output
000013F8  4EF9 00001402            295                  JMP     com_movem_0
000013FE  1CFC 0057                296  movem_w_0       MOVE.B  #'W',(A6)+          Add W to output
00001402  4EB9 00001C3E            297  com_movem_0     JSR     print4spcs 
00001408                           298                  *TODO: get register mask               
00001408  4E75                     299                  RTS
0000140A  4EF9 00001C88            300  sub0100_9       JMP     bad_code            clr_or_chk handles this
00001410  4EF9 00001C88            301  sub0100_10      JMP     bad_code            instruction unknown 
00001416  4EF9 00001C88            302  sub0100_11      JMP     bad_code            clr_or_chk handles this
0000141C  1CFC 004D                303  sub0100_12      MOVE.B  #'M',(A6)+          Add M to output
00001420  1CFC 004F                304                  MOVE.B  #'O',(A6)+          Add O to output
00001424  1CFC 0056                305                  MOVE.B  #'V',(A6)+          Add V to output 
00001428  1CFC 0045                306                  MOVE.B  #'E',(A6)+          Add E to output  
0000142C  1CFC 004D                307                  MOVE.B  #'M',(A6)+          Add M to output
00001430  1CFC 002E                308                  MOVE.B  #'.',(A6)+          Add . to output 
00001434  3602                     309                  MOVE.W  D2,D3               get current instruction
00001436  0803 0006                310                  BTST.L  #6,D3
0000143A  6700 000A                311                  BEQ     movem_w_1
0000143E  1CFC 004C                312                  MOVE.B  #'L',(A6)+          Add L to output
00001442  4EF8 1402                313                  JMP     com_movem_0
00001446  1CFC 0057                314  movem_w_1       MOVE.B  #'W',(A6)+          Add W to output
0000144A  4EB9 00001C3E            315  com_movem_1     JSR     print4spcs
00001450                           316                  *TODO: get register mask
00001450  4E75                     317                  RTS 
00001452  4EF9 00001C88            318  sub0100_13      JMP     bad_code            clr_or_chk handles this
00001458  4EB9 00001950            319  sub0100_14      JSR     iso4to7             get next 4
0000145E  B63C 0004                320                  CMP.B   #%0100,D3           TRAP
00001462  6700 0824                321                  BEQ     bad_code
00001466  B63C 0005                322                  CMP.B   #%0101,D3           LINK/UNLK
0000146A  6700 081C                323                  BEQ     bad_code
0000146E  B63C 0007                324                  CMP.B   #%0111,D3           needs more decoding
00001472  6700 002E                325                  BEQ     sub0100_14_sub2     everything else falls to 15
00001476  4EB9 0000195A            326                  JSR     iso6to7             get bits 6 and 7
0000147C  B63C 0002                327                  CMP.B   #%10,D3
00001480  6600 0806                328                  BNE     bad_code
00001484  1CFC 004A                329                  MOVE.B  #'J',(A6)+          Add J to output
00001488  1CFC 0053                330                  MOVE.B  #'S',(A6)+          Add S to output
0000148C  1CFC 0052                331                  MOVE.B  #'R',(A6)+          Add R to output
00001490  4EB9 00001C50            332                  JSR     print5spcs          
00001496  4EB9 00001AC0            333                  JSR     addressing
0000149C                           334              *TODO: check if the mode is correct                
0000149C  4EF9 00001C88            335  sub0100_15      JMP     bad_code            clr_or_chk handles this
000014A2  4EB9 0000192A            336  sub0100_14_sub2 JSR     iso0to3
000014A8  B63C 0005                337                  CMP.B   #%0101,D3           check if RT
000014AC  6700 0008                338                  BEQ     rts
000014B0  4EF9 00001C88            339                  JMP     bad_code                     
000014B6  1CFC 0052                340  rts             MOVE.B  #'R',(A6)+          Add R to output
000014BA  1CFC 0054                341                  MOVE.B  #'T',(A6)+          Add T to output
000014BE  1CFC 0053                342                  MOVE.B  #'S',(A6)+          Add S to output
000014C2  4E75                     343                  RTS                
000014C4                           344  ************************************************************
000014C4                           345  *   0101
000014C4                           346  *   SUBQ
000014C4                           347  ************************************************************
000014C4  1CFC 0053                348  op_0101     MOVE.B  #'S',(A6)+      Add S to output
000014C8  1CFC 0055                349              MOVE.B  #'U',(A6)+      Add U to output
000014CC  1CFC 0042                350              MOVE.B  #'B',(A6)+      Add B to output
000014D0  1CFC 0051                351              MOVE.B  #'Q',(A6)+      Add Q to output
000014D4  1CFC 002E                352              MOVE.B  #'.',(A6)+      Add . to output 
000014D8  3602                     353              MOVE.W  D2,D3           get word back
000014DA  E14B                     354              LSL.W   #8,D3           shift left 8
000014DC  E04B                     355              LSR.W   #8,D3           shift right 8
000014DE  EC4B                     356              LSR.W   #6,D3           shift right 6
000014E0  C6FC 0006                357              MULU    #6,D3           create offset
000014E4  45F9 00001A42            358              LEA     get_size,A2     load size jump table
000014EA  4EB2 3000                359              JSR     0(A2,D3)        jump to size table  
000014EE  4EB9 00001C50            360              JSR     print5spcs      add 5 spaces to buffer
000014F4  4EB9 00001AC0            361              JSR     addressing      jump to addressing sub routine
000014FA                           362              *TODO: check if the mode is correct     
000014FA  4E75                     363              RTS
000014FC                           364  ************************************************************
000014FC                           365  *   0110
000014FC                           366  *   BCC
000014FC                           367  *   BGT
000014FC                           368  *   BLE
000014FC                           369  *   BVS
000014FC                           370  ************************************************************
000014FC  4EB9 00001964            371  op_0110     JSR     iso8to11
00001502  C6FC 0006                372  bcc         MULU.W  #6,D3 
00001506  45F9 00001510            373              LEA     sub0110,A2
0000150C  4EF2 3000                374              JMP     0(A2,D3)
00001510  4EF9 00001570            375  sub0110     JMP     bra             unknown code
00001516  4EF9 00001576            376              JMP     bsr             unknown code
0000151C  4EF9 0000157C            377              JMP     high            unknown code
00001522  4EF9 00001582            378              JMP     low_same        unknown code
00001528  4EF9 00001588            379              JMP     carry_clr
0000152E  4EF9 0000159A            380              JMP     carry_set       unknown code
00001534  4EF9 000015A0            381              JMP     not_equal       unknown code
0000153A  4EF9 000015A6            382              JMP     equal           unknown code
00001540  4EF9 000015AC            383              JMP     oflow_clr       unknown code
00001546  4EF9 000015B2            384              JMP     oflow_set       
0000154C  4EF9 000015C4            385              JMP     plus            unknown code
00001552  4EF9 000015CA            386              JMP     minus           unknown code
00001558  4EF9 000015D0            387              JMP     grtr_equal      unknown code
0000155E  4EF9 000015D6            388              JMP     less_than       unknown code
00001564  4EF9 000015DC            389              JMP     grtr_than
0000156A  4EF9 000015EE            390              JMP     less_equal
00001570  4EF9 00001C88            391  bra         JMP     bad_code        unknown code
00001576  4EF9 00001C88            392  bsr         JMP     bad_code        unknown code
0000157C  4EF9 00001C88            393  high        JMP     bad_code        unknown code
00001582  4EF9 00001C88            394  low_same    JMP     bad_code        unknown code        
00001588  1CFC 0042                395  carry_clr   MOVE.B  #'B',(A6)+      Add B to output
0000158C  1CFC 0043                396              MOVE.B  #'C',(A6)+      Add V to output
00001590  1CFC 0043                397              MOVE.B  #'C',(A6)+      Add S to output
00001594  4EF9 000015FA            398              JMP     get_addr            
0000159A  4EF9 00001C88            399  carry_set   JMP     bad_code        unknown code  
000015A0  4EF9 00001C88            400  not_equal   JMP     bad_code        unknown code
000015A6  4EF9 00001C88            401  equal       JMP     bad_code        unknown code
000015AC  4EF9 00001C88            402  oflow_clr   JMP     bad_code        unknown code
000015B2  1CFC 0042                403  oflow_set   MOVE.B  #'B',(A6)+      Add B to output
000015B6  1CFC 0056                404              MOVE.B  #'V',(A6)+      Add V to output
000015BA  1CFC 0053                405              MOVE.B  #'S',(A6)+      Add S to output
000015BE  4EF9 000015FA            406              JMP     get_addr            
000015C4  4EF9 00001C88            407  plus        JMP     bad_code        unknown code
000015CA  4EF9 00001C88            408  minus       JMP     bad_code        unknown code
000015D0  4EF9 00001C88            409  grtr_equal  JMP     bad_code        unknown code
000015D6  4EF9 00001C88            410  less_than   JMP     bad_code        unknown code
000015DC  1CFC 0042                411  grtr_than   MOVE.B  #'B',(A6)+      Add B to output
000015E0  1CFC 0047                412              MOVE.B  #'G',(A6)+      Add V to output
000015E4  1CFC 0054                413              MOVE.B  #'T',(A6)+      Add S to output
000015E8  4EF9 000015FA            414              JMP     get_addr
000015EE  1CFC 0042                415  less_equal  MOVE.B  #'B',(A6)+      Add B to output
000015F2  1CFC 004C                416              MOVE.B  #'L',(A6)+      Add V to output
000015F6  1CFC 0045                417              MOVE.B  #'E',(A6)+      Add S to output
000015FA  4EB9 00001C50            418  get_addr    JSR     print5spcs  
00001600  1CFC 0024                419              MOVE.B  #'$',(A6)+      Add $ to output       
00001604  4EB9 0000192A            420              JSR     iso0to3
0000160A  B63C 0000                421              CMP.B   #$00,D3         16-bit displacement
0000160E  6700 0020                422              BEQ     word_dsplm
00001612  B63C 00FF                423              CMP.B   #$FF,D3         32-bit displacement
00001616  6700 001E                424              BEQ     long_dsplm
0000161A  E80B                     425              LSR.B   #4,D3           shift right 4
0000161C  4EB9 00001A26            426              JSR     get_char
00001622  4EB9 0000192A            427              JSR     iso0to3
00001628  4EB9 00001A26            428              JSR     get_char
0000162E  4E75                     429              RTS
00001630  4EB9 00001992            430  word_dsplm  JSR     get_word
00001636  4EB9 000019C0            431  long_dsplm  JSR     get_long          
0000163C                           432  ************************************************************
0000163C                           433  *   0111
0000163C                           434  *   MOVEQ
0000163C                           435  ************************************************************
0000163C  1CFC 004D                436  op_0111     MOVE.B  #'M',(A6)+      Add M to output
00001640  1CFC 004F                437              MOVE.B  #'O',(A6)+      Add O to output
00001644  1CFC 0056                438              MOVE.B  #'V',(A6)+      Add V to output
00001648  1CFC 0045                439              MOVE.B  #'E',(A6)+      Add E to output
0000164C  1CFC 0051                440              MOVE.B  #'Q',(A6)+      Add Q to output
00001650  1CFC 002E                441              MOVE.B  #'.',(A6)+      Add . to output
00001654  3602                     442              MOVE.W  D2,D3           get word back
00001656  E14B                     443              LSL.W   #8,D3           shift left 8
00001658  E04B                     444              LSR.W   #8,D3           shift right 8
0000165A  EC4B                     445              LSR.W   #6,D3           shift right 6
0000165C  C6FC 0006                446              MULU    #6,D3           create offset
00001660  45F9 00001A42            447              LEA     get_size,A2     load size jump table
00001666  4EB2 3000                448              JSR     0(A2,D3)        jump to size table
0000166A  4EB9 00001C50            449              JSR     print5spcs      add 5 spaces to buffer           
00001670  4EB9 00001AC0            450              JSR     addressing      jump to addressing sub routine
00001676                           451              *TODO: check if the mode is correct
00001676  4E75                     452              RTS
00001678                           453  ************************************************************
00001678                           454  *   1000
00001678                           455  *   DIVU
00001678                           456  *   LOR
00001678                           457  ************************************************************
00001678  0802 0008                458  op_1000     BTST    #8,D2           check if bit 8 is 1
0000167C  6700 0002                459              BEQ     sub1000         jump to sub1000 if 0
00001680  4EB9 0000195A            460  sub1000     JSR     iso6to7         get bits 6 and 7
00001686  B43C 0003                461              CMP.B   #%11,D2         if %11 then its DIVU
0000168A  6600 05FC                462              BNE     bad_code        jump to bad output
0000168E  1CFC 0044                463              MOVE.B  #'D',(A6)+      Add D to output
00001692  1CFC 0049                464              MOVE.B  #'I',(A6)+      Add I to output
00001696  1CFC 0056                465              MOVE.B  #'V',(A6)+      Add V to output
0000169A  1CFC 0055                466              MOVE.B  #'U',(A6)+      Add U to output
0000169E  1CFC 002E                467              MOVE.B  #'.',(A6)+      Add . to output
000016A2  1CFC 0057                468              MOVE.B  #'W',(A6)+      Add W to output
Line 469 ERROR: Invalid size code
000016A6  86FC 00000003            469              DIVU.L  #3,D3
000016AC  4E75                     470              RTS
000016AE                           471  ************************************************************
000016AE                           472  *   1001
000016AE                           473  *   SUB
000016AE                           474  *   SUBA
000016AE                           475  ************************************************************
000016AE  4E75                     476  op_1001     RTS
000016B0                           477  ************************************************************
000016B0                           478  *   1010 unknown
000016B0                           479  ************************************************************
000016B0  6000 05D6                480  op_1010     BRA     bad_code
000016B4  4E75                     481              RTS
000016B6                           482  ************************************************************
000016B6                           483  *   1011
000016B6                           484  *   CMP
000016B6                           485  *   CMPA
000016B6                           486  *   EOR
000016B6                           487  ************************************************************
000016B6  4E75                     488  op_1011     RTS
000016B8                           489  ************************************************************
000016B8                           490  *   1100
000016B8                           491  *   AND
000016B8                           492  *   MULS
000016B8                           493  ************************************************************
000016B8  4E75                     494  op_1100     RTS
000016BA                           495  ************************************************************
000016BA                           496  *   1101
000016BA                           497  *   ADD
000016BA                           498  *   ADDA
000016BA                           499  ************************************************************
000016BA  4EB9 00001946            500  op_1101     JSR     iso4to5         check bits 4 to 5
000016C0  B63C 0000                501              CMP.B   #%00,D3         check if ADDX
000016C4  6700 00F2                502              BEQ     addx
000016C8  4EB9 0000195A            503              JSR     iso6to7         get bits 6 to 7
000016CE  B63C 0003                504              CMP.B   #%11,D3         check if ADDA
000016D2  6700 007C                505              BEQ     adda            
000016D6  1CFC 0041                506              MOVE.B  #'A',(A6)+      Add A to output
000016DA  1CFC 0044                507              MOVE.B  #'D',(A6)+      Add D to output
000016DE  1CFC 0044                508              MOVE.B  #'D',(A6)+      Add D to output
000016E2  1CFC 002E                509              MOVE.B  #'.',(A6)+      Add . to output
000016E6  4EB9 0000195A            510              JSR     iso6to7         get size of operation
000016EC  C6FC 0006                511              MULU.W  #6,D3           form offset
000016F0  45F9 00001A42            512              LEA     get_size,A2     load size table
000016F6  4EB2 3000                513              JSR     0(A2,D3)        get size            
000016FA  4EB9 00001C50            514              JSR     print5spcs
00001700  0802 0008                515              BTST    #8,D2
00001704  6700 0026                516              BEQ     ea_to_dn
00001708  1CFC 0044                517  dn_to_ea    MOVE.B  #'D',(A6)+      Add D to output
0000170C  4EB9 0000197A            518              JSR     iso9to11        isolate register bits
00001712  C6FC 0006                519              MULU.W  #6,D3
00001716  45F9 00001BDE            520              LEA     reg_num,A2      load reg_num table
0000171C  4EB2 3000                521              JSR     0(A2,D3)        get reg_num
00001720  1CFC 002C                522              MOVE.B  #',',(A6)+      Add , to output
00001724  4EB9 00001AC0            523              JSR     addressing
0000172A                           524              *TODO: check if the mode is correct                
0000172A  4E75                     525              RTS            
0000172C  4EB9 00001AC0            526  ea_to_dn    JSR     addressing
00001732  1CFC 002C                527              MOVE.B  #',',(A6)+      Add , to output
00001736  1CFC 0044                528              MOVE.B  #'D',(A6)+      Add D to output
0000173A  4EB9 0000197A            529              JSR     iso9to11        isolate register bits
00001740  C6FC 0006                530              MULU.W  #6,D3
00001744  45F9 00001BDE            531              LEA     reg_num,A2      load reg_num table
0000174A  4EB2 3000                532              JSR     0(A2,D3)        get reg_num
0000174E  4E75                     533              RTS
00001750  1CFC 0041                534  adda        MOVE.B  #'A',(A6)+      Add A to output
00001754  1CFC 0044                535              MOVE.B  #'D',(A6)+      Add D to output
00001758  1CFC 0044                536              MOVE.B  #'D',(A6)+      Add D to output
0000175C  1CFC 0041                537              MOVE.B  #'A',(A6)+      Add A to output            
00001760  1CFC 002E                538              MOVE.B  #'.',(A6)+      Add . to output 
00001764  4EB9 0000195A            539              JSR     iso6to7         get operation size
0000176A  B63C 0003                540              CMP.B   #%011,D3        check if word
0000176E  6700 0010                541              BEQ     adda_w
00001772  B63C 0007                542              CMP.B   #%111,D3        check if long
00001776  6700 0012                543              BEQ     adda_l
0000177A  4EF9 00001C88            544              JMP     bad_code        byte operations not allowed
00001780  1CFC 0057                545  adda_w      MOVE.B  #'W',(A6)+      Add W to output
00001784  4EF9 0000178E            546              JMP     com_adda        complete adda
0000178A  1CFC 004C                547  adda_l      MOVE.B  #'L',(A6)+      Add L to output
0000178E  4EB9 00001C3E            548  com_adda    JSR     print4spcs
00001794  4EB9 00001AC0            549              JSR     addressing
0000179A  1CFC 002C                550              MOVE.B  #',',(A6)+      Add , to output
0000179E  1CFC 0041                551              MOVE.B  #'A',(A6)+      Add A to output
000017A2  4EB9 0000197A            552              JSR     iso9to11        get register bits
000017A8  C6FC 0006                553              MULU.W  #6,D3
000017AC  45F9 00001BDE            554              LEA     reg_num,A2      load reg_num table
000017B2  4EB2 3000                555              JSR     0(A2,D3)        get reg_num  
000017B6  4E75                     556              RTS         
000017B8  4EF9 00001C88            557  addx        JMP     bad_code        unknown code
000017BE  4E75                     558              RTS
000017C0                           559  ************************************************************
000017C0                           560  *   1110
000017C0                           561  *   ASR
000017C0                           562  *   LSL
000017C0                           563  *   ROL
000017C0                           564  ************************************************************
000017C0  4EB9 0000195A            565  op_1110     JSR     iso6to7         get size of instruction
000017C6  B63C 0003                566              CMP.B   #3,d3           long
000017CA  6D00 0028                567              BLT     regShift            
000017CE  4EB9 0000196E            568              JSR     iso9to10        get type of memory shift
000017D4  B63C 0000                569              CMP.B   #0,D3           arithmetic shift
000017D8  6700 0086                570              BEQ     aMemShift
000017DC  B63C 0001                571              CMP.B   #1,D3           logical shift
000017E0  6700 008A                572              BEQ     lMemShift
000017E4  B63C 0002                573              CMP.B   #2,D3           rotate with extend
000017E8  6700 00DE                574              BEQ     xMemError
000017EC  B63C 0003                575              CMP.B   #3,d3           rotate
000017F0  6700 0086                576              BEQ     rMemShift
000017F4  1803                     577  regShift    MOVE.B  D3,D4           move size to D4
000017F6  4EB9 00001932            578              JSR     iso3to4         get shift type
000017FC  C6FC 0006                579              MULU.W  #6,D3           form offset
00001800  45F9 000018CE            580              LEA     sub1110,A2      load op_1110_sub to A2
00001806  4EB2 3000                581              JSR     0(A2,D3)        jump to table 
0000180A  1CFC 002E                582              MOVE.B  #'.',(A6)+      Add . to output
0000180E  C8FC 0006                583              MULU.W  #6,D4           form offset for size
00001812  45F9 00001A42            584              LEA     get_size,A2     load size jump table
00001818  4EB2 4000                585              JSR     0(A2,D4)
0000181C  0802 0005                586              BTST.L  #5,D2           get i/r
00001820  6700 006A                587              BEQ     getShiftNum        
00001824  4EB9 00001C3E            588              JSR     print4spcs      add 4 spaces to buffer
0000182A  1CFC 0044                589              MOVE.B  #'D',(A6)+      Add 'D' to output            
0000182E  4EB9 0000197A            590              JSR     iso9to11        get num of shifts
00001834  C6FC 0006                591              MULU.W  #6,D3
00001838  45F9 00001BDE            592              LEA     reg_num,A2      load reg addressing jump
0000183E  4EB2 3000                593              JSR     0(A2,D3)        jump to table             
00001842  1CFC 002C                594              MOVE.B  #',',(A6)+      Add ',' to output   
00001846  1CFC 0044                595              MOVE.B  #'D',(A6)+      Add 'D' to output            
0000184A  4EB9 00001922            596              JSR     iso0to2         get source register
00001850  C6FC 0006                597              MULU.W  #6,D3           create offset
00001854  45F9 00001BDE            598              LEA     reg_num,A2      load reg addressing jump
0000185A  4EB2 3000                599              JSR     0(A2,D3)        jump to table          
0000185E  4E75                     600              RTS
00001860  4EB9 000018E0            601  aMemShift   JSR     arithm          arithmetic shift
00001866  4EF9 0000187E            602              JMP     memAddress      get EA
0000186C  4EB9 000018EE            603  lMemShift   JSR     logical         logical shift
00001872  4EF9 0000187E            604              JMP     memAddress      get EA      
00001878  4EB9 000018FC            605  rMemShift   JSR     rotate          rotate
0000187E  4EB9 00001C50            606  memAddress  JSR     print5spcs      add 5 spaces to buffer
00001884  4EB9 00001AC0            607              JSR     addressing      jump to addressing
0000188A                           608              *TODO: check if the mode is correct
0000188A  4E75                     609              RTS
0000188C  4EB9 00001C3E            610  getShiftNum JSR     print4spcs      add 4 spaces to buffer
00001892  1CFC 0023                611              MOVE.B  #'#',(A6)+      Add '#' to output            
00001896  4EB9 0000197A            612              JSR     iso9to11        get num of shifts
0000189C  C6FC 0006                613              MULU.W  #6,D3           create offset
000018A0  45F9 00001BDE            614              LEA     reg_num,A2      cheep binary to num
000018A6  4EB2 3000                615              JSR     0(A2,D3)        jump to table
000018AA  1CFC 002C                616              MOVE.B  #',',(A6)+      Add ',' to output   
000018AE  1CFC 0044                617              MOVE.B  #'D',(A6)+      Add 'D' to output            
000018B2  4EB9 00001922            618              JSR     iso0to2         get source register
000018B8  C6FC 0006                619              MULU.W  #6,D3           create offset
000018BC  45F9 00001BDE            620              LEA     reg_num,A2      load reg addressing jump
000018C2  4EB2 3000                621              JSR     0(A2,D3)        jump to table
000018C6  4E75                     622              RTS
000018C8  4EF9 00001C88            623  xMemError   JMP     bad_code                    
000018CE                           624  ************************************************************
000018CE                           625  *   LS\AS\RO sub table
000018CE                           626  ************************************************************
000018CE  4EF9 000018E0            627  sub1110     JMP     arithm
000018D4  4EF9 000018EE            628              JMP     logical
000018DA  4EF9 000018FC            629              JMP     rotate
000018E0  1CFC 0041                630  arithm      MOVE.B  #'A',(A6)+      Add A to output
000018E4  1CFC 0053                631              MOVE.B  #'S',(A6)+      Add S to output
000018E8  4EF9 0000190A            632              JMP     direction
000018EE  1CFC 004C                633  logical     MOVE.B  #'L',(A6)+      Add L to output
000018F2  1CFC 0053                634              MOVE.B  #'S',(A6)+      Add S to output
000018F6  4EF9 0000190A            635              JMP     direction
000018FC  1CFC 0052                636  rotate      MOVE.B  #'R',(A6)+      Add R to output
00001900  1CFC 004F                637              MOVE.B  #'O',(A6)+      Add O to output
00001904  4EF9 0000190A            638              JMP     direction
0000190A  0802 0008                639  direction   BTST.L  #8,D2           Test bit 5 of instruction
0000190E  6700 0008                640              BEQ     right
00001912  1CFC 004C                641              MOVE.B  #'L',(A6)+      Add L to output 
00001916  4E75                     642              RTS
00001918  1CFC 0052                643  right       MOVE.B  #'R',(A6)+      Add R to output            
0000191C  4E75                     644              RTS
0000191E                           645  ************************************************************
0000191E                           646  *   1111 unknown
0000191E                           647  ************************************************************
0000191E  6000 0368                648  op_1111     BRA     bad_code
00001922                           649  ************************************************************
00001922                           650  * isolate bits 0 to 2 in D3
00001922                           651  ************************************************************ 
00001922  3602                     652  iso0to2     MOVE.W  D2,D3           get current instruction
00001924  0243 0007                653              ANDI.W  #$7,D3          mask out all but first 3
00001928  4E75                     654              RTS
0000192A                           655  ************************************************************
0000192A                           656  * isolate bits 0 to 3 in D3
0000192A                           657  ************************************************************             
0000192A  3602                     658  iso0to3     MOVE.W  D2,D3           get current instruction
0000192C  0243 000F                659              ANDI.W  #$F,D3          mask out all but first 3
00001930  4E75                     660              RTS                   
00001932                           661  ************************************************************
00001932                           662  * isolate bits 3 and 4 in D3
00001932                           663  ************************************************************ 
00001932  3602                     664  iso3to4     MOVE.W  D2,D3           get current instruction
00001934  E64B                     665              LSR.W   #3,D3           move it 3 to location 0
00001936  0243 0003                666              ANDI.W  #$3,D3          mask out all but first 2
0000193A  4E75                     667              RTS 
0000193C                           668  ************************************************************
0000193C                           669  * isolate bits 3 to 5 in D3
0000193C                           670  ************************************************************ 
0000193C  3602                     671  iso3to5     MOVE.W  D2,D3           get current instruction
0000193E  E64B                     672              LSR.W   #3,D3           move bit 3 to location 0
00001940  0243 0007                673              ANDI.W  #$7,D3          mask out all but first 3
00001944  4E75                     674              RTS             
00001946                           675  ************************************************************
00001946                           676  * isolate bits 4 to 5 in D3
00001946                           677  ************************************************************ 
00001946  3602                     678  iso4to5     MOVE.W  D2,D3           get current instruction
00001948  E84B                     679              LSR.W   #4,D3           move it 3 to location 0
0000194A  0243 0003                680              ANDI.W  #$3,D3          mask out all but first 2
0000194E  4E75                     681              RTS 
00001950                           682  ************************************************************
00001950                           683  * isolate bits 4 to 7 in D3
00001950                           684  ************************************************************ 
00001950  3602                     685  iso4to7     MOVE.W  D2,D3           get current instruction
00001952  E84B                     686              LSR.W   #4,D3           move it 3 to location 0
00001954  0243 000F                687              ANDI.W  #$F,D3          mask out all but first 2
00001958  4E75                     688              RTS         
0000195A                           689  ************************************************************
0000195A                           690  * isolate bits 6 and 7 in D3
0000195A                           691  ************************************************************
0000195A  3602                     692  iso6to7     MOVE.W  D2,D3           get current instruction
0000195C  EC4B                     693              LSR.W   #6,D3           move bit 6 to location 0
0000195E  0243 0003                694              ANDI.W  #$3,D3          mask out all but first 2
00001962  4E75                     695              RTS           
00001964                           696  ************************************************************
00001964                           697  * isolate bits 8 to 11 in D3
00001964                           698  ************************************************************
00001964  3602                     699  iso8to11    MOVE.W  D2,D3           get current instruction
00001966  E04B                     700              LSR.W   #8,D3           move bit 9 to location 1
00001968  0243 000F                701              ANDI.W  #$F,D3           mask out all but first 2
0000196C  4E75                     702              RTS
0000196E                           703  ************************************************************
0000196E                           704  * isolate bits 9 to 10 in D3
0000196E                           705  ************************************************************
0000196E  3602                     706  iso9to10    MOVE.W  D2,D3           get current instruction
00001970  E04B                     707              LSR.W   #8,D3           move bit 9 to location 1
00001972  E24B                     708              LSR.W   #1,D3           move bit 9 to loaction 0
00001974  0243 0003                709              ANDI.W  #$3,D3          mask out all but first 2
00001978  4E75                     710              RTS
0000197A                           711  ************************************************************
0000197A                           712  * isolate bits 9 to 11 in D3
0000197A                           713  ************************************************************            
0000197A  3602                     714  iso9to11    MOVE.W  D2,D3           get current instruction
0000197C  E04B                     715              LSR.W   #8,D3           move bit 9 to location 1
0000197E  E24B                     716              LSR.W   #1,D3           move bit 9 to loaction 0
00001980  0243 0007                717              ANDI.W  #$7,D3          mask out all but first 3
00001984  4E75                     718              RTS 
00001986                           719  ************************************************************
00001986                           720  * isolate bits 12 to 15 in D3
00001986                           721  ************************************************************            
00001986  3602                     722  iso12to15   MOVE.W  D2,D3           get current instruction
00001988  E04B                     723              LSR.W   #8,D3           move bit 12 to location 4
0000198A  E84B                     724              LSR.W   #4,D3           move bit 12 to loaction 0
0000198C  0243 000F                725              ANDI.W  #$F,D3          mask out all but first 3
00001990  4E75                     726              RTS         
00001992                           727  ************************************************************
00001992                           728  *   Get next word or long
00001992                           729  ************************************************************            
00001992  4243                     730  get_word    CLR     D3
00001994  361C                     731              MOVE.W  (A4)+,D3
00001996  3803                     732              MOVE.W  D3,D4
00001998  E04C                     733              LSR.W   #8,D4
0000199A  E84C                     734              LSR.W   #4,D4
0000199C  4EB9 00001A26            735              JSR     get_char            
000019A2  3803                     736              MOVE.W  D3,D4
000019A4  E04C                     737              LSR.W   #8,D4
000019A6  4EB9 00001A26            738              JSR     get_char
000019AC  3803                     739              MOVE.W  D3,D4
000019AE  E84C                     740              LSR.W   #4,D4
000019B0  4EB9 00001A26            741              JSR     get_char
000019B6  3803                     742              MOVE.W  D3,D4
000019B8  4EB9 00001A26            743              JSR     get_char
000019BE  4E75                     744              RTS
000019C0  4243                     745  get_long    CLR     D3
000019C2  361C                     746              MOVE.W  (A4)+,D3
000019C4  3803                     747              MOVE.W  D3,D4
000019C6  E04C                     748              LSR.W   #8,D4
000019C8  E04C                     749              LSR.W   #8,D4
000019CA  E04C                     750              LSR.W   #8,D4            
000019CC  E84C                     751              LSR.W   #4,D4
000019CE  4EB9 00001A26            752              JSR     get_char
000019D4  3803                     753              MOVE.W  D3,D4
000019D6  E04C                     754              LSR.W   #8,D4
000019D8  E04C                     755              LSR.W   #8,D4
000019DA  E04C                     756              LSR.W   #8,D4            
000019DC  4EB9 00001A26            757              JSR     get_char
000019E2  3803                     758              MOVE.W  D3,D4
000019E4  E04C                     759              LSR.W   #8,D4
000019E6  E04C                     760              LSR.W   #8,D4
000019E8  E84C                     761              LSR.W   #4,D4
000019EA  4EB9 00001A26            762              JSR     get_char
000019F0  3803                     763              MOVE.W  D3,D4
000019F2  E04C                     764              LSR.W   #8,D4
000019F4  E04C                     765              LSR.W   #8,D4
000019F6  4EB9 00001A26            766              JSR     get_char
000019FC  3803                     767              MOVE.W  D3,D4
000019FE  E04C                     768              LSR.W   #8,D4
00001A00  E84C                     769              LSR.W   #4,D4
00001A02  4EB9 00001A26            770              JSR     get_char
00001A08  3803                     771              MOVE.W  D3,D4
00001A0A  E04C                     772              LSR.W   #8,D4
00001A0C  4EB9 00001A26            773              JSR     get_char
00001A12  3803                     774              MOVE.W  D3,D4
00001A14  E84C                     775              LSR.W   #4,D4
00001A16  4EB9 00001A26            776              JSR     get_char
00001A1C  3803                     777              MOVE.W  D3,D4
00001A1E  4EB9 00001A26            778              JSR     get_char
00001A24  4E75                     779              RTS 
00001A26  0244 000F                780  get_char    ANDI.W  #$000F,D4
00001A2A  B83C 0009                781              CMP.B   #$09,D4         compare against A
00001A2E  6E00 000A                782              BGT     char_up         branch to CHARUP
00001A32  0604 0030                783              ADDI.B  #$30,D4         Add $30 to get 0-9 ASCII
00001A36  6000 0006                784              BRA     add_char
00001A3A  0604 0037                785  char_up     ADDI.B #$37,D4          Add $37 to get A-F ASCII
00001A3E  1CC4                     786  add_char    MOVE.B D4,(A6)+         Load value into output
00001A40  4E75                     787              RTS                     return  
00001A42                           788  ************************************************************
00001A42                           789  *   Size Jump Table
00001A42                           790  ************************************************************
00001A42  4EF9 00001A5C            791  get_size    JMP size00              BYTE
00001A48  4EF9 00001A62            792              JMP size01              WORD
00001A4E  4EF9 00001A68            793              JMP size10              LONG
00001A54  4EF9 00001A6E            794              JMP size11              ILLEGAL
00001A5A  4E75                     795              RTS         
00001A5C                           796  ************************************************************
00001A5C                           797  *   Size Sub-Jump Table
00001A5C                           798  ************************************************************
00001A5C  1CFC 0042                799  size00      MOVE.B  #'B',(A6)+      Add B to output
00001A60  4E75                     800              RTS
00001A62  1CFC 0057                801  size01      MOVE.B  #'W',(A6)+      Add W to output
00001A66  4E75                     802              RTS
00001A68  1CFC 004C                803  size10      MOVE.B  #'L',(A6)+      Add L to output
00001A6C  4E75                     804              RTS 
00001A6E  4EF9 00001C66            805  size11      JMP     bad_size                    
00001A74                           806  *-------------------------------------------------------------
00001A74                           807  *   Immediate Data
00001A74                           808  *-------------------------------------------------------------
00001A74  4EB8 195A                809  immediate   JSR     iso6to7         isolate bits 6 and 7 for size
00001A78  1803                     810              MOVE.B  D3,D4           move size to D4
00001A7A  C8FC 0006                811              MULU.W  #6,D4
00001A7E  45F8 1A42                812              LEA     get_size,A2
00001A82  4EB2 4000                813              JSR     0(A2,D4)
00001A86  4EB9 00001C3E            814              JSR     print4spcs      add 4 spaces to buffer           
00001A8C  1CFC 0023                815              MOVE.B  #'#',(A6)+      Add '#' to output
00001A90  1CFC 0024                816              MOVE.B  #'$',(A6)+      Add '$' to output
00001A94  B63C 0000                817              CMP.B   #0,D3           byte
00001A98  6700 0014                818              BEQ     imm_byte
00001A9C  B63C 0001                819              CMP.B   #1,D3           word
00001AA0  6700 0012                820              BEQ     imm_word
00001AA4  B63C 0002                821              CMP.B   #2,D3           long
00001AA8  6700 0010                822              BEQ     imm_long
00001AAC  4E75                     823              RTS            
00001AAE  4EB8 1992                824  imm_byte    JSR     get_word
00001AB2  4E75                     825              RTS
00001AB4  4EB8 1992                826  imm_word    JSR     get_word
00001AB8  4E75                     827              RTS
00001ABA  4EB8 19C0                828  imm_long    JSR     get_long
00001ABE  4E75                     829              RTS           
00001AC0                           830  *---------------------------------------------------------------
00001AC0                           831  *   Addressing
00001AC0                           832  *   Extract the 6 least significant digits from the instruction
00001AC0                           833  *   Assumes mode is in D3
00001AC0                           834  *   Assumes register is in D4
00001AC0                           835  *---------------------------------------------------------------
00001AC0  4243                     836  addressing  CLR     D3
00001AC2  1602                     837              MOVE.B  D2,D3           get instruction for bytes 3-5 (mode)
00001AC4  E60B                     838              LSR.B   #3,D3           move right 3
00001AC6  0203 0007                839              ANDI.B  #7,D3           mask for just first 3 bits
00001ACA  1802                     840              MOVE.B  D2,D4           get instruction for bytes 3-5 (reg)
00001ACC  0204 0007                841              ANDI.B  #7,D4           mask for just first 3 bits      
00001AD0  45F9 00001AE4            842              LEA     add_mode,A2
00001AD6  C6FC 0006                843              MULU    #6,D3           form offset
00001ADA  C8FC 0006                844              MULU    #6,D4           form offset
00001ADE  4EB2 3000                845              JSR     0(A2,D3)        jump offset based on D3 
00001AE2  4E75                     846              RTS
00001AE4                           847  *---------------------------------------------------------------
00001AE4                           848  *   Addressing Mode Jump Table
00001AE4                           849  *---------------------------------------------------------------
00001AE4  4EF9 00001B16            850  add_mode    JMP     add_mode000     Dn
00001AEA  4EF9 00001B26            851              JMP     add_mode001     An
00001AF0  4EF9 00001B36            852              JMP     add_mode010     (An)
00001AF6  4EF9 00001B4E            853              JMP     add_mode011     (An)+
00001AFC  4EF9 00001B6A            854              JMP     add_mode100     -(An)
00001B02  4EF9 00001B86            855              JMP     add_mode101     (d16,An)
00001B08  4EF9 00001BAE            856              JMP     add_mode110     (d8,An,Xn)
00001B0E  4EF9 00001BDA            857              JMP     add_mode111     (XXX).W, (XXX).L, #<data>
00001B14  4E75                     858              RTS
00001B16                           859  *---------------------------------------------------------------
00001B16                           860  *   Addressing Modes
00001B16                           861  *---------------------------------------------------------------        
00001B16  1CFC 0044                862  add_mode000 MOVE.B  #'D',(A6)+      Add D to output 
00001B1A  45F9 00001BDE            863              LEA     reg_num,A2 
00001B20  4EB2 4000                864              JSR     0(A2,D4)        get reg num
00001B24  4E75                     865              RTS
00001B26  1CFC 0041                866  add_mode001 MOVE.B  #'A',(A6)+      Add A to output  
00001B2A  45F9 00001BDE            867              LEA     reg_num,A2 
00001B30  4EB2 4000                868              JSR     0(A2,D4)        get reg num
00001B34  4E75                     869              RTS
00001B36  1CFC 0028                870  add_mode010 MOVE.B  #'(',(A6)+      Add ( to output 
00001B3A  1CFC 0041                871              MOVE.B  #'A',(A6)+      Add A to output
00001B3E  45F9 00001BDE            872              LEA     reg_num,A2 
00001B44  4EB2 4000                873              JSR     0(A2,D4)        get reg num
00001B48  1CFC 0029                874              MOVE.B  #')',(A6)+      Add ) to output
00001B4C  4E75                     875              RTS
00001B4E  1CFC 0028                876  add_mode011 MOVE.B  #'(',(A6)+      Add ( to output 
00001B52  1CFC 0041                877              MOVE.B  #'A',(A6)+      Add A to output
00001B56  45F9 00001BDE            878              LEA     reg_num,A2 
00001B5C  4EB2 4000                879              JSR     0(A2,D4)        get reg num
00001B60  1CFC 0029                880              MOVE.B  #')',(A6)+      Add ) to output
00001B64  1CFC 002B                881              MOVE.B  #'+',(A6)+      Add + to output
00001B68  4E75                     882              RTS
00001B6A  1CFC 002D                883  add_mode100 MOVE.B  #'-',(A6)+      Add - to output 
00001B6E  1CFC 0028                884              MOVE.B  #'(',(A6)+      Add ( to output 
00001B72  1CFC 0041                885              MOVE.B  #'A',(A6)+      Add A to output
00001B76  45F9 00001BDE            886              LEA     reg_num,A2 
00001B7C  4EB2 4000                887              JSR     0(A2,D4)        get reg num
00001B80  1CFC 0029                888              MOVE.B  #')',(A6)+      Add ) to output
00001B84  4E75                     889              RTS
00001B86  1CFC 0028                890  add_mode101 MOVE.B  #'(',(A6)+      Add ( to output 
00001B8A  1CFC 0044                891              MOVE.B  #'D',(A6)+      Add D to output
00001B8E  1CFC 0031                892              MOVE.B  #'1',(A6)+      Add 1 to output 
00001B92  1CFC 0036                893              MOVE.B  #'6',(A6)+      Add 6 to output 
00001B96  1CFC 002C                894              MOVE.B  #',',(A6)+      Add , to output 
00001B9A  1CFC 0041                895              MOVE.B  #'A',(A6)+      Add A to output
00001B9E  45F9 00001BDE            896              LEA     reg_num,A2 
00001BA4  4EB2 4000                897              JSR     0(A2,D4)        get reg num
00001BA8  1CFC 0029                898              MOVE.B  #')',(A6)+      Add ) to output
00001BAC  4E75                     899              RTS
00001BAE  1CFC 0028                900  add_mode110 MOVE.B  #'(',(A6)+      Add ( to output 
00001BB2  1CFC 0044                901              MOVE.B  #'D',(A6)+      Add D to output
00001BB6  1CFC 0038                902              MOVE.B  #'8',(A6)+      Add 8 to output
00001BBA  1CFC 002C                903              MOVE.B  #',',(A6)+      Add , to output 
00001BBE  1CFC 0041                904              MOVE.B  #'A',(A6)+      Add A to output
00001BC2  45F9 00001BDE            905              LEA     reg_num,A2 
00001BC8  4EB2 4000                906              JSR     0(A2,D4)        get reg num
00001BCC  1CFC 002C                907              MOVE.B  #',',(A6)+      Add , to output 
00001BD0  1CFC 0058                908              MOVE.B  #'X',(A6)+      Add X to output         
00001BD4  1CFC 0029                909              MOVE.B  #')',(A6)+      Add ) to output
00001BD8  4E75                     910              RTS
00001BDA  4EB8 1A74                911  add_mode111 JSR     immediate       go to immediate
00001BDE                           912  *---------------------------------------------------------------
00001BDE                           913  *   Register Jump Table
00001BDE                           914  *---------------------------------------------------------------
00001BDE  4EF9 00001C0E            915  reg_num     JMP     reg_num000      register num 0
00001BE4  4EF9 00001C14            916              JMP     reg_num001      register num 1
00001BEA  4EF9 00001C1A            917              JMP     reg_num010      register num 2
00001BF0  4EF9 00001C20            918              JMP     reg_num011      register num 3
00001BF6  4EF9 00001C26            919              JMP     reg_num100      register num 4
00001BFC  4EF9 00001C2C            920              JMP     reg_num101      register num 5
00001C02  4EF9 00001C32            921              JMP     reg_num110      register num 6
00001C08  4EF9 00001C38            922              JMP     reg_num111      register num 7
00001C0E                           923  *---------------------------------------------------------------
00001C0E                           924  *   Register Number Jump Table
00001C0E                           925  *---------------------------------------------------------------
00001C0E  1CFC 0030                926  reg_num000  MOVE.B  #'0',(A6)+      register num 0
00001C12  4E75                     927              RTS
00001C14  1CFC 0031                928  reg_num001  MOVE.B  #'1',(A6)+      register num 1
00001C18  4E75                     929              RTS
00001C1A  1CFC 0032                930  reg_num010  MOVE.B  #'2',(A6)+      register num 2
00001C1E  4E75                     931              RTS
00001C20  1CFC 0033                932  reg_num011  MOVE.B  #'3',(A6)+      register num 3
00001C24  4E75                     933              RTS            
00001C26  1CFC 0034                934  reg_num100  MOVE.B  #'4',(A6)+      register num 4
00001C2A  4E75                     935              RTS
00001C2C  1CFC 0035                936  reg_num101  MOVE.B  #'5',(A6)+      register num 5
00001C30  4E75                     937              RTS
00001C32  1CFC 0036                938  reg_num110  MOVE.B  #'6',(A6)+      register num 7
00001C36  4E75                     939              RTS
00001C38  1CFC 0037                940  reg_num111  MOVE.B  #'7',(A6)+      register num 8
00001C3C  4E75                     941              RTS                        
00001C3E                           942  *---------------------------------------------------------------
00001C3E                           943  *   Print 4 spaces
00001C3E                           944  *---------------------------------------------------------------
00001C3E  1CFC 0020                945  print4spcs  MOVE.B  #' ',(A6)+      Add ' ' to output
00001C42  1CFC 0020                946              MOVE.B  #' ',(A6)+      Add ' ' to output
00001C46  1CFC 0020                947              MOVE.B  #' ',(A6)+      Add ' ' to output
00001C4A  1CFC 0020                948              MOVE.B  #' ',(A6)+      Add ' ' to output 
00001C4E  4E75                     949              RTS
00001C50                           950  *---------------------------------------------------------------
00001C50                           951  *   Print 5 spaces
00001C50                           952  *---------------------------------------------------------------
00001C50  1CFC 0020                953  print5spcs  MOVE.B  #' ',(A6)+      Add ' ' to output
00001C54  1CFC 0020                954              MOVE.B  #' ',(A6)+      Add ' ' to output
00001C58  1CFC 0020                955              MOVE.B  #' ',(A6)+      Add ' ' to output
00001C5C  1CFC 0020                956              MOVE.B  #' ',(A6)+      Add ' ' to output
00001C60  1CFC 0020                957              MOVE.B  #' ',(A6)+      Add ' ' to output  
00001C64  4E75                     958              RTS
00001C66                           959  ************************************************************
00001C66                           960  *   Error messages
00001C66                           961  ************************************************************            
00001C66  1CFC 0042                962  bad_size    MOVE.B  #'B',(A6)+      Add B to output
00001C6A  1CFC 0041                963              MOVE.B  #'A',(A6)+      Add A to output
00001C6E  1CFC 0044                964              MOVE.B  #'D',(A6)+      Add D to output
00001C72  1CFC 0020                965              MOVE.B  #' ',(A6)+      Add ' ' to output
00001C76  1CFC 0053                966              MOVE.B  #'S',(A6)+      Add S to output
00001C7A  1CFC 0049                967              MOVE.B  #'I',(A6)+      Add I to output
00001C7E  1CFC 005A                968              MOVE.B  #'Z',(A6)+      Add Z to output
00001C82  1CFC 0045                969              MOVE.B  #'E',(A6)+      Add E to output
00001C86  4E75                     970              RTS  
00001C88  1CFC 0042                971  bad_code    MOVE.B  #'B',(A6)+      Add B to output
00001C8C  1CFC 0041                972              MOVE.B  #'A',(A6)+      Add A to output
00001C90  1CFC 0044                973              MOVE.B  #'D',(A6)+      Add D to output
00001C94  1CFC 0020                974              MOVE.B  #' ',(A6)+      Add ' ' to output
00001C98  1CFC 0043                975              MOVE.B  #'C',(A6)+      Add C to output
00001C9C  1CFC 004F                976              MOVE.B  #'O',(A6)+      Add O to output
00001CA0  1CFC 0044                977              MOVE.B  #'D',(A6)+      Add D to output
00001CA4  1CFC 0045                978              MOVE.B  #'E',(A6)+      Add E to output            
00001CA8  4E75                     979              RTS
00001CAA                           980              
00001CAA                           981  * Put variables and constants here
00001CAA                           982  output  DS.B 80
00001CFA                           983  
00001CFA  4240                     984  done    CLR     D0
00001CFC                           985          END    START        ; last line of source

1 error detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA                1750
ADDA_L              178A
ADDA_W              1780
ADDI                11B6
ADDRESSING          1AC0
ADDX                17B8
ADD_CHAR            1A3E
ADD_MODE            1AE4
ADD_MODE000         1B16
ADD_MODE001         1B26
ADD_MODE010         1B36
ADD_MODE011         1B4E
ADD_MODE100         1B6A
ADD_MODE101         1B86
ADD_MODE110         1BAE
ADD_MODE111         1BDA
AMEMSHIFT           1860
ANDI                1196
ARITHM              18E0
BAD_CODE            1C88
BAD_SIZE            1C66
BCC                 1502
BCHG                111A
BCHGI               11F0
BCLR                1154
BITI                11CE
BRA                 1570
BSET                115A
BSR                 1576
BTST                1114
CARRY_CLR           1588
CARRY_SET           159A
CHAR_UP             1A3A
CMPI                1222
COM_ADDA            178E
COM_MOVEM_0         1402
COM_MOVEM_1         144A
DIRECTION           190A
DN_TO_EA            1708
DONE                1CFA
EA_TO_DN            172C
EORI                1206
EQUAL               15A6
GETSHIFTNUM         188C
GET_ADDR            15FA
GET_CHAR            1A26
GET_LONG            19C0
GET_SIZE            1A42
GET_WORD            1992
GRTR_EQUAL          15D0
GRTR_THAN           15DC
HIGH                157C
IMMEDIATE           1A74
IMM_BYTE            1AAE
IMM_FINAL           123E
IMM_LONG            1ABA
IMM_WORD            1AB4
ISO0TO2             1922
ISO0TO3             192A
ISO12TO15           1986
ISO3TO4             1932
ISO3TO5             193C
ISO4TO5             1946
ISO4TO7             1950
ISO6TO7             195A
ISO8TO11            1964
ISO9TO10            196E
ISO9TO11            197A
LEA_OR_CHK          12E2
LESS_EQUAL          15EE
LESS_THAN           15D6
LMEMSHIFT           186C
LOGICAL             18EE
LONG_DSPLM          1636
LOWER0000           10CA
LOWER0000_2         10F6
LOW_SAME            1582
MAIN                1042
MEMADDRESS          187E
MINUS               15CA
MOVEM_W_0           13FE
MOVEM_W_1           1446
MOVEP               1160
NOT_EQUAL           15A0
OFLOW_CLR           15AC
OFLOW_SET           15B2
OP_0000             10C0
OP_0001             1250
OP_0010             1276
OP_0011             129C
OP_0100             12C2
OP_0101             14C4
OP_0110             14FC
OP_0111             163C
OP_1000             1678
OP_1001             16AE
OP_1010             16B0
OP_1011             16B6
OP_1100             16B8
OP_1101             16BA
OP_1110             17C0
OP_1111             191E
OP_JUMP             105E
ORI                 1190
OUTPUT              1CAA
PLUS                15C4
PRINT               1024
PRINT4SPCS          1C3E
PRINT5SPCS          1C50
REGSHIFT            17F4
REG_NUM             1BDE
REG_NUM000          1C0E
REG_NUM001          1C14
REG_NUM010          1C1A
REG_NUM011          1C20
REG_NUM100          1C26
REG_NUM101          1C2C
REG_NUM110          1C32
REG_NUM111          1C38
RIGHT               1918
RMEMSHIFT           1878
ROTATE              18FC
RTS                 14B6
SIZE00              1A5C
SIZE01              1A62
SIZE10              1A68
SIZE11              1A6E
START               1000
SUB0100             1308
SUB0100_0           1368
SUB0100_1           136E
SUB0100_10          1410
SUB0100_11          1416
SUB0100_12          141C
SUB0100_13          1452
SUB0100_14          1458
SUB0100_14_SUB2     14A2
SUB0100_15          149C
SUB0100_2           1374
SUB0100_3           13A6
SUB0100_4           13AC
SUB0100_5           13B2
SUB0100_6           13B8
SUB0100_7           13BE
SUB0100_8           13C4
SUB0100_9           140A
SUB0110             1510
SUB1000             1680
SUB1110             18CE
SUBI                11B0
UPPER0000           10E0
UPPER0000_2         1166
WORD_DSPLM          1630
XMEMERROR           18C8
